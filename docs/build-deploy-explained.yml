# GitHub Actions workflow to build, test, and optionally deploy a FastAPI app

name: Build and Deploy Code

# Trigger this workflow on any push or pull request to any branch
on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing  # GitHub environment ('testing') â€” secrets/vars are scoped to this

    # Define environment variables using GitHub Secrets
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    # Define a PostgreSQL service container for integration tests
    services:
      postgres:
        image: postgres  # Official PostgreSQL Docker image
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test  # Create a test DB
        ports:
          - 5432:5432  # Map container port to host port
        options: >-    # Health check configuration
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest  # The runner OS

    steps:
      # Step 1: Checkout the repo code
      - name: pulling git repo
        uses: actions/checkout@v2

      # Step 2: Setup Python environment
      - name: Install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Step 3: Upgrade pip
      - name: update pip
        run: python -m pip install --upgrade pip

      # Step 4: Install project dependencies from requirements.txt
      - name: install all dependencies
        run: pip install -r requirements.txt

      # Step 5: Run tests with pytest
      - name: test with pytest
        run: |
          pip install pytest
          pytest

      # =================== Docker Build and Push (Commented Out) ===================

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push Docker image
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Output image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  # =================== Optional Deployment Job (Commented Out) ===================

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]  # Only run deploy after build job succeeds
  #   environment:
  #     name: production

  #   steps:
  #     - name: pulling git repo
  #       uses: actions/checkout@v2

  #     - name: deploying to Heroku
  #       uses: akhileshns/heroku-deploy@v3.12.12
  #       with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #         heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
  #         heroku_email: ${{secrets.HEROKU_EMAIL}}

  #     - name: deploy to ubuntu server via SSH
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{secrets.PROD_HOST}}
  #         username: ${{secrets.PROD_USERNAME}}
  #         password: ${{secrets.PROD_PASSWORD}}
  #         script: |
  #           cd app/src
  #           git pull
  #           echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api

  # Helpful deployment note (not part of the workflow):
  # login to our ubuntu
  # cd /app/src
  # git pull
  # systemctl restart API
